{"ast":null,"code":"import _slicedToArray from \"/Users/jerry/Projects/Web/ToDo/todo/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState } from \"react\";\nexport const useItemHooks = (initialValue = []) => {\n  const _useState = useState(initialValue),\n        _useState2 = _slicedToArray(_useState, 2),\n        items = _useState2[0],\n        setItems = _useState2[1]; // set initial value of search to items\n\n\n  const _useState3 = useState(items),\n        _useState4 = _slicedToArray(_useState3, 2),\n        search = _useState4[0],\n        setSearch = _useState4[1];\n\n  return {\n    items,\n    search,\n    addItem: text => {\n      if (text.trim() !== \"\") {\n        setItems(items.concat({\n          text,\n          checked: false\n        })); // refresh search after adding in new items\n\n        console.log(items);\n        setSearch(items);\n      }\n    },\n    checkItem: id => {\n      setItems(items.map((item, index) => {\n        if (id === index) {\n          item.checked = !item.checked;\n        }\n\n        return item;\n      }));\n    },\n    removeItem: id => {\n      setItems(items.filter((item, index) => id !== index));\n      setSearch(items);\n    },\n    updateSearch: items => {\n      setSearch(items);\n    },\n    searchItem: e => {\n      const searchTgt = e.target.value; // set search to empty array first\n\n      setSearch([]);\n\n      if (searchTgt === \"\") {\n        // empty search, add everything\n        setSearch(items);\n      } else {\n        // else go through items and only match those that\n        items.map(item => {\n          console.log(search);\n\n          if (item.text.toLowerCase().includes(searchTgt.toLowerCase())) {\n            setSearch(search.concat(item));\n          }\n\n          return item;\n        });\n      }\n    },\n    editItem: (id, value) => {\n      setItems(items.map((item, index) => {\n        if (id === index) {\n          item.value = value;\n        }\n\n        return item;\n      }));\n    }\n  };\n};","map":{"version":3,"sources":["/Users/jerry/Projects/Web/ToDo/todo/src/hook/itemHooks.js"],"names":["useState","useItemHooks","initialValue","items","setItems","search","setSearch","addItem","text","trim","concat","checked","console","log","checkItem","id","map","item","index","removeItem","filter","updateSearch","searchItem","e","searchTgt","target","value","toLowerCase","includes","editItem"],"mappings":";AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAO,MAAMC,YAAY,GAAG,CAACC,YAAY,GAAG,EAAhB,KAAuB;AAAA,oBACvBF,QAAQ,CAACE,YAAD,CADe;AAAA;AAAA,QAC1CC,KAD0C;AAAA,QACnCC,QADmC,kBAEjD;;;AAFiD,qBAGrBJ,QAAQ,CAACG,KAAD,CAHa;AAAA;AAAA,QAG1CE,MAH0C;AAAA,QAGlCC,SAHkC;;AAKjD,SAAO;AACLH,IAAAA,KADK;AAELE,IAAAA,MAFK;AAGLE,IAAAA,OAAO,EAAEC,IAAI,IAAI;AACf,UAAIA,IAAI,CAACC,IAAL,OAAgB,EAApB,EAAwB;AACtBL,QAAAA,QAAQ,CACND,KAAK,CAACO,MAAN,CAAa;AACXF,UAAAA,IADW;AAEXG,UAAAA,OAAO,EAAE;AAFE,SAAb,CADM,CAAR,CADsB,CAOtB;;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYV,KAAZ;AACAG,QAAAA,SAAS,CAACH,KAAD,CAAT;AACD;AACF,KAfI;AAiBLW,IAAAA,SAAS,EAAEC,EAAE,IAAI;AACfX,MAAAA,QAAQ,CACND,KAAK,CAACa,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACzB,YAAIH,EAAE,KAAKG,KAAX,EAAkB;AAChBD,UAAAA,IAAI,CAACN,OAAL,GAAe,CAACM,IAAI,CAACN,OAArB;AACD;;AACD,eAAOM,IAAP;AACD,OALD,CADM,CAAR;AAQD,KA1BI;AA4BLE,IAAAA,UAAU,EAAEJ,EAAE,IAAI;AAChBX,MAAAA,QAAQ,CAACD,KAAK,CAACiB,MAAN,CAAa,CAACH,IAAD,EAAOC,KAAP,KAAiBH,EAAE,KAAKG,KAArC,CAAD,CAAR;AACAZ,MAAAA,SAAS,CAACH,KAAD,CAAT;AACD,KA/BI;AAiCLkB,IAAAA,YAAY,EAAElB,KAAK,IAAI;AACrBG,MAAAA,SAAS,CAACH,KAAD,CAAT;AACD,KAnCI;AAqCLmB,IAAAA,UAAU,EAAEC,CAAC,IAAI;AACf,YAAMC,SAAS,GAAGD,CAAC,CAACE,MAAF,CAASC,KAA3B,CADe,CAEf;;AACApB,MAAAA,SAAS,CAAC,EAAD,CAAT;;AACA,UAAIkB,SAAS,KAAK,EAAlB,EAAsB;AACpB;AACAlB,QAAAA,SAAS,CAACH,KAAD,CAAT;AACD,OAHD,MAGO;AACL;AACAA,QAAAA,KAAK,CAACa,GAAN,CAAUC,IAAI,IAAI;AAChBL,UAAAA,OAAO,CAACC,GAAR,CAAYR,MAAZ;;AACA,cACEY,IAAI,CAACT,IAAL,CACGmB,WADH,GAEGC,QAFH,CAEYJ,SAAS,CAACG,WAAV,EAFZ,CADF,EAIE;AACArB,YAAAA,SAAS,CAACD,MAAM,CAACK,MAAP,CAAcO,IAAd,CAAD,CAAT;AACD;;AACD,iBAAOA,IAAP;AACD,SAVD;AAWD;AACF,KA1DI;AA4DLY,IAAAA,QAAQ,EAAE,CAACd,EAAD,EAAKW,KAAL,KAAe;AACvBtB,MAAAA,QAAQ,CACND,KAAK,CAACa,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACzB,YAAIH,EAAE,KAAKG,KAAX,EAAkB;AAChBD,UAAAA,IAAI,CAACS,KAAL,GAAaA,KAAb;AACD;;AACD,eAAOT,IAAP;AACD,OALD,CADM,CAAR;AAQD;AArEI,GAAP;AAuED,CA5EM","sourcesContent":["import { useState } from \"react\";\n\nexport const useItemHooks = (initialValue = []) => {\n  const [items, setItems] = useState(initialValue);\n  // set initial value of search to items\n  const [search, setSearch] = useState(items);\n\n  return {\n    items,\n    search,\n    addItem: text => {\n      if (text.trim() !== \"\") {\n        setItems(\n          items.concat({\n            text,\n            checked: false\n          })\n        );\n        // refresh search after adding in new items\n        console.log(items);\n        setSearch(items);\n      }\n    },\n\n    checkItem: id => {\n      setItems(\n        items.map((item, index) => {\n          if (id === index) {\n            item.checked = !item.checked;\n          }\n          return item;\n        })\n      );\n    },\n\n    removeItem: id => {\n      setItems(items.filter((item, index) => id !== index));\n      setSearch(items);\n    },\n\n    updateSearch: items => {\n      setSearch(items);\n    },\n\n    searchItem: e => {\n      const searchTgt = e.target.value;\n      // set search to empty array first\n      setSearch([]);\n      if (searchTgt === \"\") {\n        // empty search, add everything\n        setSearch(items);\n      } else {\n        // else go through items and only match those that\n        items.map(item => {\n          console.log(search)\n          if (\n            item.text\n              .toLowerCase()\n              .includes(searchTgt.toLowerCase())\n          ) {\n            setSearch(search.concat(item));\n          }\n          return item;\n        });\n      }\n    },\n\n    editItem: (id, value) => {\n      setItems(\n        items.map((item, index) => {\n          if (id === index) {\n            item.value = value;\n          }\n          return item;\n        })\n      );\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}