{"ast":null,"code":"import _slicedToArray from \"/Users/jerry/Projects/Web/ToDo/todo/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState } from \"react\";\nexport const useItemHooks = (initialValue = []) => {\n  const _useState = useState(initialValue),\n        _useState2 = _slicedToArray(_useState, 2),\n        items = _useState2[0],\n        setItems = _useState2[1]; // set initial value of search to items\n\n\n  const _useState3 = useState(items),\n        _useState4 = _slicedToArray(_useState3, 2),\n        search = _useState4[0],\n        setSearch = _useState4[1]; // id for drag and drop\n\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        idNum = _useState6[0],\n        setIdNum = _useState6[1];\n\n  return {\n    items,\n    setItems,\n    search,\n    setSearch,\n    // add item hook\n    addItem: text => {\n      if (text.trim() !== \"\") {\n        const id = `item-${idNum}`;\n        const newItems = items.concat({\n          id,\n          text,\n          checked: false\n        });\n        setItems(newItems); // refresh search after adding in new items\n        // console.log(newItems);\n\n        setSearch(newItems); // increment id\n\n        setIdNum(idNum + 1);\n      }\n    },\n    // listener for checkbox\n    checkItem: id => {\n      const checkMap = list => {\n        const newList = list.map((item, index) => {\n          if (id === index) {\n            item.checked = !item.checked;\n          }\n\n          return item;\n        });\n        return newList;\n      };\n\n      console.log(checkMap(search));\n      setItems(checkMap(items));\n      setSearch(checkMap(search));\n    },\n    // listener for remove item\n    removeItem: id => {\n      const newItems = items.filter((item, index) => id !== index);\n      setItems(newItems);\n      setSearch(newItems);\n    },\n    // listener for search bar\n    searchItem: e => {\n      const searchTgt = e.target.value; // set search to empty array first\n\n      if (searchTgt === \"\") {\n        // empty search, add everything\n        setSearch(items);\n      } else {\n        // else go through items and only add unique items that matches\n        setSearch(items.filter(item => item.text.toLowerCase().includes(searchTgt.toLowerCase())));\n      }\n    },\n    // listener for edit\n    editItem: (id, value) => {\n      const newItems = items.map((item, index) => {\n        if (id === index) {\n          item.text = value;\n        }\n\n        return item;\n      });\n      setItems(newItems);\n      setSearch(newItems);\n    }\n  };\n};","map":{"version":3,"sources":["/Users/jerry/Projects/Web/ToDo/todo/src/hook/itemHooks.js"],"names":["useState","useItemHooks","initialValue","items","setItems","search","setSearch","idNum","setIdNum","addItem","text","trim","id","newItems","concat","checked","checkItem","checkMap","list","newList","map","item","index","console","log","removeItem","filter","searchItem","e","searchTgt","target","value","toLowerCase","includes","editItem"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\n\nexport const useItemHooks = (initialValue = []) => {\n  const [items, setItems] = useState(initialValue);\n  // set initial value of search to items\n  const [search, setSearch] = useState(items);\n  // id for drag and drop\n  const [idNum, setIdNum] = useState(0);\n\n  return {\n    items,\n    setItems,\n    search,\n    setSearch,\n    // add item hook\n    addItem: text => {\n      if (text.trim() !== \"\") {\n        const id = `item-${idNum}`;\n        const newItems = items.concat({\n          id,\n          text,\n          checked: false\n        });\n        setItems(newItems);\n        // refresh search after adding in new items\n        // console.log(newItems);\n        setSearch(newItems);\n        // increment id\n        setIdNum(idNum + 1);\n      }\n    },\n\n    // listener for checkbox\n    checkItem: id => {\n      const checkMap = (list) => {\n        const newList = list.map((item, index) => {\n          if (id === index) {\n            item.checked = !item.checked;\n          }\n          return item;\n        });\n        return newList;\n      };\n      \n      console.log(checkMap(search))\n      setItems(\n        checkMap(items)\n      );\n\n      setSearch(\n        checkMap(search)\n      );\n    },\n\n    // listener for remove item\n    removeItem: id => {\n      const newItems = items.filter((item, index) => id !== index);\n      setItems(newItems);\n      setSearch(newItems);\n    },\n\n    // listener for search bar\n    searchItem: e => {\n      const searchTgt = e.target.value;\n      // set search to empty array first\n      if (searchTgt === \"\") {\n        // empty search, add everything\n        setSearch(items);\n      } else {\n        // else go through items and only add unique items that matches\n        setSearch(\n          items.filter(item =>\n            item.text.toLowerCase().includes(searchTgt.toLowerCase())\n          )\n        );\n      }\n    },\n\n    // listener for edit\n    editItem: (id, value) => {\n      const newItems = items.map((item, index) => {\n        if (id === index) {\n          item.text = value;\n        }\n        return item;\n      });\n      setItems(newItems);\n      setSearch(newItems);\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}