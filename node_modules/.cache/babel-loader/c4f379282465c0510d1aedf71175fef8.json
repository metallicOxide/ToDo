{"ast":null,"code":"import _slicedToArray from \"/Users/jerry/Projects/Web/ToDo/todo/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState } from \"react\";\nexport const useItemHooks = (initialValue = []) => {\n  const _useState = useState(initialValue),\n        _useState2 = _slicedToArray(_useState, 2),\n        items = _useState2[0],\n        setItems = _useState2[1]; // set initial value of search to items\n\n\n  const _useState3 = useState(items),\n        _useState4 = _slicedToArray(_useState3, 2),\n        search = _useState4[0],\n        setSearch = _useState4[1];\n\n  const inResult = item => {\n    const filteredResut = search.filter(result => result.text !== item);\n\n    if (filteredResut.length !== search.length) {\n      return 0;\n    }\n\n    return 1;\n  };\n\n  return {\n    items,\n    search,\n    addItem: text => {\n      if (text.trim() !== \"\") {\n        const newItems = items.concat({\n          text,\n          checked: false\n        });\n        setItems(newItems); // refresh search after adding in new items\n        // console.log(newItems);\n\n        setSearch(newItems);\n      }\n    },\n    checkItem: id => {\n      setItems(items.map((item, index) => {\n        if (id === index) {\n          item.checked = !item.checked;\n        }\n\n        return item;\n      }));\n    },\n    removeItem: id => {\n      const newItems = items.filter((item, index) => id !== index);\n      setItems(newItems);\n      setSearch(newItems);\n    },\n    searchItem: e => {\n      const searchTgt = e.target.value;\n      console.log(e.target.value); // set search to empty array first\n\n      console.log(search);\n\n      if (searchTgt === \"\") {\n        // empty search, add everything\n        setSearch(items);\n      } else {\n        // else go through items and only add unique items that matches\n        items.map(item => {\n          setSearch([]);\n          console.log(item);\n\n          if (item.text.toLowerCase().includes(searchTgt.toLowerCase())\n          /*&& inResult(item.text)*/\n          ) {\n              setSearch(search.concat(item));\n            }\n\n          return item;\n        });\n        let hash = {};\n      }\n    },\n    editItem: (id, value) => {\n      setItems(items.map((item, index) => {\n        if (id === index) {\n          item.value = value;\n        }\n\n        return item;\n      }));\n    }\n  };\n};","map":{"version":3,"sources":["/Users/jerry/Projects/Web/ToDo/todo/src/hook/itemHooks.js"],"names":["useState","useItemHooks","initialValue","items","setItems","search","setSearch","inResult","item","filteredResut","filter","result","text","length","addItem","trim","newItems","concat","checked","checkItem","id","map","index","removeItem","searchItem","e","searchTgt","target","value","console","log","toLowerCase","includes","hash","editItem"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\n\nexport const useItemHooks = (initialValue = []) => {\n  const [items, setItems] = useState(initialValue);\n  // set initial value of search to items\n  const [search, setSearch] = useState(items);\n\n  const inResult = item => {\n    const filteredResut = search.filter((result) => result.text !== item);\n    if (filteredResut.length !== search.length) {\n      return 0;\n    }\n    return 1;\n  }\n\n  return {\n    items,\n    search,\n    addItem: text => {\n      if (text.trim() !== \"\") {\n        const newItems = items.concat({\n          text,\n          checked: false\n        });\n        setItems(newItems);\n        // refresh search after adding in new items\n        // console.log(newItems);\n        setSearch(newItems);\n      }\n    },\n\n    checkItem: id => {\n      setItems(\n        items.map((item, index) => {\n          if (id === index) {\n            item.checked = !item.checked;\n          }\n          return item;\n        })\n      );\n    },\n\n    removeItem: id => {\n      const newItems = items.filter((item, index) => id !== index);\n      setItems(newItems);\n      setSearch(newItems);\n    },\n\n    searchItem: e => {\n      const searchTgt = e.target.value;\n      console.log(e.target.value)\n      // set search to empty array first\n      console.log(search)\n      if (searchTgt === \"\") {\n        // empty search, add everything\n        setSearch(items);\n      } else {\n        // else go through items and only add unique items that matches\n        items.map(item => {\n          setSearch([])\n          console.log(item)\n          if (item.text.toLowerCase().includes(searchTgt.toLowerCase()) /*&& inResult(item.text)*/) {\n            setSearch(search.concat(item))\n          }\n          return item;\n        });\n        let hash = {}\n        \n      }\n    },\n\n    editItem: (id, value) => {\n      setItems(\n        items.map((item, index) => {\n          if (id === index) {\n            item.value = value;\n          }\n          return item;\n        })\n      );\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}