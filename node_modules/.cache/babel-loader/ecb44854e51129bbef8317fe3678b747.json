{"ast":null,"code":"import _slicedToArray from \"/Users/jerry/Projects/Web/ToDo/todo/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState } from \"react\";\nexport const useItemHooks = (initialValue = []) => {\n  const _useState = useState(initialValue),\n        _useState2 = _slicedToArray(_useState, 2),\n        items = _useState2[0],\n        setItems = _useState2[1]; // set initial value of search to items\n\n\n  const _useState3 = useState(items),\n        _useState4 = _slicedToArray(_useState3, 2),\n        search = _useState4[0],\n        setSearch = _useState4[1];\n\n  return {\n    items,\n    search,\n    addItem: text => {\n      if (text.trim() !== \"\") {\n        const newItems = items.concat({\n          text,\n          checked: false\n        });\n        setItems(newItems); // refresh search after adding in new items\n\n        console.log(newItems);\n        setSearch(newItems);\n      }\n    },\n    checkItem: id => {\n      setItems(items.map((item, index) => {\n        if (id === index) {\n          item.checked = !item.checked;\n        }\n\n        return item;\n      }));\n    },\n    removeItem: id => {\n      const newItems = items.filter((item, index) => id !== index);\n      setItems(newItems);\n      setSearch(newItems);\n    },\n    updateSearch: items => {\n      setSearch(items);\n    },\n    searchItem: e => {\n      const searchTgt = e.target.value; // set search to empty array first\n\n      setSearch([]);\n\n      if (searchTgt === \"\") {\n        // empty search, add everything\n        setSearch(items);\n      } else {\n        // else go through items and only match those that\n        items.map(item => {\n          console.log(search, searchTgt);\n\n          if (item.text.toLowerCase().includes(searchTgt.toLowerCase())) {\n            setSearch(search.concat(item));\n          }\n\n          return item;\n        });\n      }\n    },\n    editItem: (id, value) => {\n      setItems(items.map((item, index) => {\n        if (id === index) {\n          item.value = value;\n        }\n\n        return item;\n      }));\n    }\n  };\n};","map":{"version":3,"sources":["/Users/jerry/Projects/Web/ToDo/todo/src/hook/itemHooks.js"],"names":["useState","useItemHooks","initialValue","items","setItems","search","setSearch","addItem","text","trim","newItems","concat","checked","console","log","checkItem","id","map","item","index","removeItem","filter","updateSearch","searchItem","e","searchTgt","target","value","toLowerCase","includes","editItem"],"mappings":";AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAO,MAAMC,YAAY,GAAG,CAACC,YAAY,GAAG,EAAhB,KAAuB;AAAA,oBACvBF,QAAQ,CAACE,YAAD,CADe;AAAA;AAAA,QAC1CC,KAD0C;AAAA,QACnCC,QADmC,kBAEjD;;;AAFiD,qBAGrBJ,QAAQ,CAACG,KAAD,CAHa;AAAA;AAAA,QAG1CE,MAH0C;AAAA,QAGlCC,SAHkC;;AAKjD,SAAO;AACLH,IAAAA,KADK;AAELE,IAAAA,MAFK;AAGLE,IAAAA,OAAO,EAAEC,IAAI,IAAI;AACf,UAAIA,IAAI,CAACC,IAAL,OAAgB,EAApB,EAAwB;AACtB,cAAMC,QAAQ,GAAGP,KAAK,CAACQ,MAAN,CAAa;AAC5BH,UAAAA,IAD4B;AAE5BI,UAAAA,OAAO,EAAE;AAFmB,SAAb,CAAjB;AAIAR,QAAAA,QAAQ,CAACM,QAAD,CAAR,CALsB,CAMtB;;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACAJ,QAAAA,SAAS,CAACI,QAAD,CAAT;AACD;AACF,KAdI;AAgBLK,IAAAA,SAAS,EAAEC,EAAE,IAAI;AACfZ,MAAAA,QAAQ,CACND,KAAK,CAACc,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACzB,YAAIH,EAAE,KAAKG,KAAX,EAAkB;AAChBD,UAAAA,IAAI,CAACN,OAAL,GAAe,CAACM,IAAI,CAACN,OAArB;AACD;;AACD,eAAOM,IAAP;AACD,OALD,CADM,CAAR;AAQD,KAzBI;AA2BLE,IAAAA,UAAU,EAAEJ,EAAE,IAAI;AAChB,YAAMN,QAAQ,GAAGP,KAAK,CAACkB,MAAN,CAAa,CAACH,IAAD,EAAOC,KAAP,KAAiBH,EAAE,KAAKG,KAArC,CAAjB;AACAf,MAAAA,QAAQ,CAACM,QAAD,CAAR;AACAJ,MAAAA,SAAS,CAACI,QAAD,CAAT;AACD,KA/BI;AAiCLY,IAAAA,YAAY,EAAEnB,KAAK,IAAI;AACrBG,MAAAA,SAAS,CAACH,KAAD,CAAT;AACD,KAnCI;AAqCLoB,IAAAA,UAAU,EAAEC,CAAC,IAAI;AACf,YAAMC,SAAS,GAAGD,CAAC,CAACE,MAAF,CAASC,KAA3B,CADe,CAEf;;AACArB,MAAAA,SAAS,CAAC,EAAD,CAAT;;AACA,UAAImB,SAAS,KAAK,EAAlB,EAAsB;AACpB;AACAnB,QAAAA,SAAS,CAACH,KAAD,CAAT;AACD,OAHD,MAGO;AACL;AACAA,QAAAA,KAAK,CAACc,GAAN,CAAUC,IAAI,IAAI;AAChBL,UAAAA,OAAO,CAACC,GAAR,CAAYT,MAAZ,EAAoBoB,SAApB;;AACA,cAAIP,IAAI,CAACV,IAAL,CAAUoB,WAAV,GAAwBC,QAAxB,CAAiCJ,SAAS,CAACG,WAAV,EAAjC,CAAJ,EAA+D;AAC7DtB,YAAAA,SAAS,CAACD,MAAM,CAACM,MAAP,CAAcO,IAAd,CAAD,CAAT;AACD;;AACD,iBAAOA,IAAP;AACD,SAND;AAOD;AACF,KAtDI;AAwDLY,IAAAA,QAAQ,EAAE,CAACd,EAAD,EAAKW,KAAL,KAAe;AACvBvB,MAAAA,QAAQ,CACND,KAAK,CAACc,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACzB,YAAIH,EAAE,KAAKG,KAAX,EAAkB;AAChBD,UAAAA,IAAI,CAACS,KAAL,GAAaA,KAAb;AACD;;AACD,eAAOT,IAAP;AACD,OALD,CADM,CAAR;AAQD;AAjEI,GAAP;AAmED,CAxEM","sourcesContent":["import { useState } from \"react\";\n\nexport const useItemHooks = (initialValue = []) => {\n  const [items, setItems] = useState(initialValue);\n  // set initial value of search to items\n  const [search, setSearch] = useState(items);\n\n  return {\n    items,\n    search,\n    addItem: text => {\n      if (text.trim() !== \"\") {\n        const newItems = items.concat({\n          text,\n          checked: false\n        });\n        setItems(newItems);\n        // refresh search after adding in new items\n        console.log(newItems);\n        setSearch(newItems);\n      }\n    },\n\n    checkItem: id => {\n      setItems(\n        items.map((item, index) => {\n          if (id === index) {\n            item.checked = !item.checked;\n          }\n          return item;\n        })\n      );\n    },\n\n    removeItem: id => {\n      const newItems = items.filter((item, index) => id !== index);\n      setItems(newItems);\n      setSearch(newItems);\n    },\n\n    updateSearch: items => {\n      setSearch(items);\n    },\n\n    searchItem: e => {\n      const searchTgt = e.target.value;\n      // set search to empty array first\n      setSearch([]);\n      if (searchTgt === \"\") {\n        // empty search, add everything\n        setSearch(items);\n      } else {\n        // else go through items and only match those that\n        items.map(item => {\n          console.log(search, searchTgt);\n          if (item.text.toLowerCase().includes(searchTgt.toLowerCase())) {\n            setSearch(search.concat(item));\n          }\n          return item;\n        });\n      }\n    },\n\n    editItem: (id, value) => {\n      setItems(\n        items.map((item, index) => {\n          if (id === index) {\n            item.value = value;\n          }\n          return item;\n        })\n      );\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}